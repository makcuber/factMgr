#!/bin/bash +e

#Developer: Mak Cuber
#DC: 7/30/10/2016
#UD: 1/31/10/2016
#UD: 2/17/1/2017
#UD: 3/18/1/2017
#UD: 4/19/1/2017
#UD: 5/28/1/2017
#UD: 2/31/1/2017
#UD: 4/2/2/2017
#UD: 4/2/3/2017
#UD: 5/3/3/2017
#UD: 6/11/3/2017
#UD: 6/22/4/2017
#UD: 1/24/4/2017
#UD: 4/27/4/2017

#VARIABLES
execPath="$0"
OpSys=$(uname -rv)
verboseOn="1"
ProgVer="0.0.8"
VerifyKeySend="nXskfs4eGL1M5aQiCqgEygAl9e5YqE8e"
VerifyKeyRecive="dfkkDUkaFlA6yNZFVuuThI0gkwoX3Jh3"

#defaults
progName=factMgr
configSuffix=conf
SAVEINT=20
BinPathDEF="/bin/"
ConfigPathDEF="/etc/$progName"
RunPathDEF="/var/factorio"
UpdatePathDEF="/home/git/git/factMgr.git/bash/factMgr"
binFileDEF="/bin/$progName"
configFileDEF="$ConfigPathDEF/$progName.$configSuffix"
modlistPathDEF=$ConfigPathDEF/modlist
saveExtDEF="zip"
editorDEF="nano"
tarNameDEF="factorio"
downloadLogFileDEF="$baseDIR/download.log"
VER_LATEST_DEF=0.14.22

runFileDEF=/bin/x64/factorio
downloadFileDEF=linux64

urlPrefixDEF=https://www.factorio.com/get-download
urlTailDEF=headless/$downloadFileDEF
modlistEXTDEF=json
modlistNameDEF=modlist
modlistSizeDEF=2000
modAPIDomainDEF=https://mods.factorio.com
modlistURLDEF=$modAPIDomainDEF/api/mods?page_size=$modlistSizeDEF

verMaxDEF=35

#Directories
baseDir=$RunPathDEF
versionsDIR=$baseDir/versions
mapsDIR=$baseDir/maps
modsDIR=$baseDir/mods
modPackDIR=$baseDir/modpacks
savesDIR=$baseDir/saves

#commands
createSaveCMD=--create
AutoSaveIntCMD=--autosave-interval
startCMD=--start-server
setModCMD=--mod-directory

#rcon
PASS=hello
rconPORT=7890

#FUNCTIONS
function verbose {
	if [ "$verboseOn" = "1" ]; then
		if ! [ -z $1 ]; then
			var_name=(${!1@})
			echo $var_name"="$1
		fi
	fi
}
function Syntax {
	echo ""
	echo "$progName version $ProgVer"
	echo ""
	echo "Syntax: $progName [Cmd] [subCmd] [args]"
	echo ""
	echo "===Configuration==="
	echo "	-install	[BinPath] [ConfigPath] [RunPath]	Install $progName"
	echo "	-update		[UpdatePath]				Update $progName"
	echo "	-uninstall						Uninstall $progName"
	echo "	-config							Edit configuration file"
	echo ""
	echo "===Server Control==="
	echo "	-r 							Server commands"
	echo "	   -s		[MapName] [#.#.#] [ModPackName]			Start server"
	echo "	   -k 						   	  Stop server"
	echo "	   -c		[ProfileName]					Create a server profile"
	echo ""
	echo "===Versions==="
	echo "	-v 							Version commands"
	echo "	   -l 						   	   List local versions"
	echo "	   -u 						   	   Get latest version"
	echo "	   -d 		[#.#.#]			   	   	   Download a version"
	echo ""
	echo "===Saves==="
	echo "	-s 							Saves commands"
	echo "	   -l 						   	   List available saves"
	echo "	   -n		[#.#.#] [name]				   Create new save"
	echo "	   -d 		[#.#.#]			   	   	   Delete a save"
	echo ""
	echo "===Mods==="
	echo "	-m 							Mods commands"
	echo "	   -l 						   	   List local mods"
	echo "	   -r 						   	   List remote mods"
	echo "	   -g 		[ModName]			   	   Download a mod"
	echo "	   -i 		[FilePath]			   	   Import a mod"
	echo ""
	echo "===Help==="
	echo "	-h		[command]				Show this help page"
	echo ""
}

#Uninstall
function Uninstall {
	if [ -e "$BinPath/$progName" ]; then
		echo "$progName does not appear to be installed on this system"
		echo "Uninstallation cancelled"
	else
		echo -n "Uninstall $progName script? (y/n):"
		read select
		if [ $select = "y" ]; then
			rm "$BinPath/$progName"
			if [ -e "$BinPath/$progName" ]; then
				echo "Uninstallation failed!"
			else
				echo "Uninstallation suceeded"
			fi
		else
			echo "Uninstallation cancelled"
		fi
	fi

	if [ -e "$ConfigPath/$progName" ]; then
		echo "$progName does not appear to be installed on this system"
		echo "Uninstallation cancelled"
	else
		echo -n "Uninstall $progName script? (y/n):"
		read select
		if [ $select = "y" ]; then
			rm "$BinPath/$progName"
			if [ -e "$BinPath/$progName" ]; then
				echo "Uninstallation failed!"
			else
				echo "Uninstallation suceeded"
			fi
		else
			echo "Uninstallation cancelled"
		fi
	fi
}

#configuration
function init {

	#add config file parsing here

	BinPath="$BinPathDEF"
	ConfigPath="$ConfigPathDEF"
	RunPath="$RunPathDEF"

	baseDir=$RunPath
	versionsDIR=$baseDir/versions
	mapsDIR=$baseDir/maps
	modsDIR=$baseDir/mods
	modPackDIR=$baseDir/modpacks
	savesDIR=$baseDir/saves
	VER_LATEST=$VER_LATEST_DEF

	runFile=/bin/x64/factorio
	downloadFILE=linux64
	configFile=$configFileDEF
	urlPrefix=$urlPrefixDEF
	urlTail=$urlTailDEF
	saveExt=$saveExtDEF
	editor=$editorDEF
	tarName=$tarNameDEF
	downloadLogFile=$downloadLogFileDEF

	modAPIDomain=$modAPIDomainDEF
	modlistURL=$modlistURLDEF
	modlistPath=$modlistPathDEF
	modlistEXT=$modlistEXTDEF
	modlistName=$modlistNameDEF

	verMax=$verMaxDEF
}
function writeConf {
	touch "$configFile"
	(echo "$conf")>>"$configFile"
}
function Config {
	if [ -e "$configFile" ]; then
		$editor $configFile
	else
		echo ""
		echo "No configuration file was found"
		echo -n "Do you want to generate a new configuration file? (y/n):"
		read select
		if [ "$select" == "y" ]; then
			writeConf
			if [ -e "$configFile" ]; then
				$editor $configFile
			else
				echo ""
				echo "Something went wrong, configuration file could not be created :("
			fi
		fi
		echo ""
	fi
}

#Install
function installScript {
	echo "Installing script..."
	cat "$execPath" > "$BinPath/$progName"
	echo "Creating executable..."
	chmod +x "$BinPath/$progName"
}
function installConfig {
	#config
	echo ""
	echo "Checking for existing configuration directory..."
	if ! [ -d "$ConfigPath" ]; then
		echo "Creating configuration directory..."
		mkdir "$ConfigPath"
		if ! [ -d "$modlistPath" ]; then
			echo "Creating modlist directory..."
			mkdir "$modlistPath"
		fi
	fi
	echo "Checking for existing configuration files..."
	if [ -e "$configFile" ]; then
			echo "A $progName configuration file appears to already exist on this system"
			echo -n "Do you want overwrite the existing configuration file? (y/n): "
			read select
			if [ "$select" = "y" ]; then
				writeConf
			else
				echo "Skipping configuration file generation"
			fi
	else
		echo "Creating configuration file..."
		writeConf
	fi
}
function installFileStructure {
	#file structure
	echo ""
	echo "Checking for existing file structure..."
	if ! [ -d "$RunPath" ]; then
		echo "Building file structure:"
		mkdir "$RunPath"
	else
		echo "Verifying file structure:"
	fi

	buildVerifyFolder $RunPath versions
	buildVerifyFolder $RunPath saves
	buildVerifyFolder $RunPath mods
	buildVerifyFolder $RunPath modpacks
}
function buildVerifyFolder {
	echo -n "	$2 folder..."
	if ! [ -d "$1" ]; then
		echo "BUILT"
		mkdir "$1"/"$2"
	else
		echo "FOUND"
	fi
}
function Install {
	if [ "$1" == "" ]; then
		BinPath="$BinPathDEF"
	else
		BinPath="$1"
	fi
	if [ "$2" == "" ]; then
		ConfigPath="$ConfigPathDEF"
	else
		ConfigPath="$2"
	fi
	if [ "$3" == "" ]; then
		RunPath="$RunPathDEF"
	else
		RunPath="$3"
	fi

	#script
	echo ""
	echo "Initiating installation of $progName version $ProgVer"
	echo ""
	echo "Will install script to:			$BinPath"
	echo "Creating configuration file in: 	$ConfigPath"
	echo "Creating file structure in:		$RunPath"
	echo ""
	echo -n "Install with this configuration? (y/n): "
	read select
	if [ "$select" = "y" ]; then
		#install scripts
		echo ""
		echo "Checking for existing installation..."
		if [ -e "$BinPath/$progName" ]; then
				echo "$progName Script appears to already be installed on this system"
				echo -n "Do you want to reinstall the script? (y/n): "
				read select
				if [ "$select" = "y" ]; then
					installScript
				else
					echo "Skipping script installation"
				fi
		else
			installScript
		fi

		#generate configuration files
		installConfig

		#build file structure
		installFileStructure

		echo ""
		echo "DONE"
		echo ""
	else
		echo "Installation cancelled"
	fi
}

#Update
function verifyRespond {
	if [ "$1" == "$VerifyKeySend" ]; then
		echo "$VerifyKeyRecive"
	else
		echo "Invalid Key"
	fi
}
function Update {

	if [ -z $1 ]; then
		UpdatePath="$1"
	else
		UpdatePath="$UpdatePathDEF"
	fi

	echo ""
	echo -n "Searching for update at path \"$UpdatePath\"..."
	if [ -e "$1" ]; then
		echo "SUCCESS"

		echo -n "Verifying update..."
		if [ $("$1" -verify $VerifyKeySend) == "$VerifyKeyRecive" ]; then
			echo "SUCCESS"

			#add version comparison here
			updateVer=$("$1" -version)

			echo ""
			echo "You currently have $progName version $ProgVer installed"
			echo -n "Do you want to update $progName to version $updateVer? (y/n): "
			read select

			if [ $select == "y" ]; then
				echo ""
				"$1" -install
			else
				echo ""
				echo "Update aborted"
			fi
		else
			echo "FAILED"
			echo ""
			echo "The specified file: $1"
			echo "does not appear to be a valid update for $progName"
		fi
	else
		echo "FAILED"
		echo ""
		echo "The specified file does not exist"
	fi
}

#Saves
function parseSaveCMDS {
	case $1 in
		-n)
			MakeMap $2 $3
			;;
		-d)
			delMap $2
			;;
		*)
			ListSaves $2
			;;
	esac
}
function ListSaves {
	echo ""
	if [ -d $savesDIR ]; then
		currentSaves=$(ls $savesDIR)
		if [ "$currentSaves" == "" ]; then
			echo "No saves are currently installed on the local system"
			echo "Use \"sudo $progName -m\" to generate a new save game"
		else
			echo "Saves currently available on local system:"
			for i in $(echo $(ls $savesDIR) | sed "s/,/ /g")
			do
			    echo " - $i"
			done
		fi
	else
		echo "Saves directory not found, $progName may not be installed"
	fi
	echo ""
}
function genMap {
	VER=$1
	NAME=$2

	echo "Version: $VER"
	echo "Name: $NAME"
	echo ""
	echo -n "Generate new map with these parameters? (y/n): "
	read select
	if [ "$select" = "y" ]; then
		echo ""
		echo "Generating new map \"$NAME\" using version $VER..."
		echo ""
		$versionsDIR/$VER/$runFile $createSaveCMD $savesDIR/$NAME
		echo ""
		if [ -e $savesDIR/$NAME.$saveExt ]; then
			echo "SUCCESS"
		else
			echo "FAILED"
			echo ""
			echo "It appears that something went wrong :("
		fi
	fi
}
function mapGenNameCheck {
	VER=$1
	NAME=$2

	if [ -d $versionsDIR/$VER ]; then
		if [ -e $versionsDIR/$VER/$runFile ]; then
			if [ -e "$savesDIR/$NAME.$saveExt" ]; then
				i=1;
				while [ -e "$savesDIR/$NAME_$i.$saveExt" ]; do
					let i=i+1
				done
				NAME+="_$i"
				genMap $VER $NAME
			else
				genMap $VER $NAME
			fi
		else
			echo "Version $VER appears to be corupted, executable is missing"
		fi
	else
		echo "Version $VER is not available on the local system"
	fi
}
function MakeMap {
	VER=$1
	NAME=$2
	#echo $VER

	echo ""
	if [ -d $versionsDIR ]; then
		if [ -d $savesDIR ]; then
			if [ "$VER" == "" ]; then
				echo "No Version specified"
				echo ""
				echo -n "Use latest version? (y/n): "
				read select
				if [ "$select" == "y" ]; then
					determineLatestVersion
					mapGenNameCheck $VER_LATEST $NAME
				fi
			else
				mapGenNameCheck $VER $NAME
			fi
		else
			echo "Saves directory not found, $progName may not be installed"
		fi
	else
		echo "Versions directory not found, $progName may not be installed"
	fi
	echo ""
}
function delMap {
	NAME=$1

	echo ""
	if [ -d $savesDIR ]; then
		if [ -e $savesDIR/$NAME.$saveExt ]; then
			echo -n "Are you sure you want to the delete the save file \"$NAME\"? (y/n): "
			read select
			if [ "$select" = "y" ]; then
				echo ""
				echo -n "Deleting save file \"$NAME\"..."
				rm -r "$savesDIR/$NAME.$saveExt"
				if [ -e $savesDIR/$NAME.$saveExt ]; then
					echo "FAILED"
				else
					echo "SUCCESS"
				fi
			else
				echo ""
				echo "Deletion cancelled"
			fi
		else
			echo "No save file by the name of \"$NAME\" exists on the local system"
		fi
		echo ""
	else
		echo "Saves directory not found, $progName may not be installed"
	fi
}

#Mods
function parseModsCMDS {
	case $1 in
		-g)
			GetMod $2
			;;
		-i)
			ImportMod $2
			;;
		-p)
			parseModPackCMDS $2 $3 $4
			;;
		-info)
			GetModInfo "name" "$3"
			;;
		*)
			ListMods $2
			;;
	esac
}
function updateModList {
	#if modlist directory exists, download a new copy of the modlist from the
	#remote server, backing up the old modlist with a datetime stamp. If modlist
	#backup fails prompt user for permission to overwrite old modlist
	echo ""
	if [ -d $modlistPath ]; then
		if [ -e "$modlistPath/$modlistName.$modlistEXT" ]; then
			echo -n "Creating backup of old modlist data..."
			NOW=$(date +%Y-%m-%d-%-H-%M-%S)
			mv "$modlistPath/$modlistName.$modlistEXT" "$modlistPath/$modlistName-$NOW.$modlistEXT"
			if [ -e "$modlistPath/$modlistName-$NOW.$modlistEXT" ]; then
				echo "SUCCESS"
				getModList
			else
				echo "FAILED"
				echo ""
				echo -n "Overwrite modlist? (y/n): "
				read select
				if [ "$select" == "y" ]; then
					echo ""
					getModList
				fi
			fi
		else
			getModList
		fi
	else
		echo "Modlist configuration directory not found, $progName may not be installed"
	fi
	echo ""
}
function getModList {
	#download a new copy of the modlist from the remote server if the modlist URL
	#checks out
	echo -n "Connecting to remote mods database..."
	if [[ $(wget $modlistURL -O-) ]] 2>/dev/null; then
		echo "SUCCESS"
		echo -n "Downloading modlist data..."
		wget $modlistURL --output-document "$modlistPath/$modlistName.$modlistEXT" -a $downloadLogFile
		if [ -e $modlistPath/$modlistName.$modlistEXT ]; then
			echo "SUCCESS"
		else
			echo "FAILED"
		fi
	else
		echo "FAILED"
	fi
}
function downloadMod {
	#download the target mod from the remote server if the URL checks out
	echo -n "Connecting to remote mods database..."
	if [[ $(wget $modAPIDomain$1 -O-) ]] 2>/dev/null; then
		echo "SUCCESS"
		echo -n "Downloading mod..."
		wget modAPIDomain$1 --output-document "$modsDIR/$2/$3" -a $downloadLogFile
		if [ -e $modsDIR/$2/$3 ]; then
			echo "SUCCESS"
		else
			echo "FAILED"
		fi
	else
		echo "FAILED"
		echo ""
		echo "The mod \"$4\" does not appear to exist at the given URL:"
		echo "$modAPIDomain$1"
	fi
}
function downloadModWrapper {
	#check to see if the mods directory exists, and create a subfolder to contain
	#multiple versions of the target mod if such folder does not already exist
	echo ""
	if [ -d $modsDIR ]; then
		if [ -d $modsDIR/$2 ]; then
			echo "Existing mod folder found for mod \"$4\""
			downloadMod $1 $2 $3 "$4"
		else
			echo "No mod folder found for mod \"$4\""
			echo -n "Creating mod folder..."
			(mkdir $modsDIR/$2)>NULL
			if [ -d $modsDIR/$2 ]; then
				echo "SUCCESS"
				downloadMod $1 $2 $3 "$4"
			else
				echo "FAILED"
			fi
		fi
	else
		echo "Mods directory not found, $progName may not be installed"
	fi
}
function getModURL {
	#search modlist for given mod, retrive info and download if found and prompted
	echo ""
	if [ -d $modlistPath ]; then
		if [ -e $modlistPath/$modlistName.$modlistEXT ]; then
			i=0
			#sort by first letter to speed up search
			#use $query:0:1 to get first letter
			i_max=$(jq -r ".results | length" "$modlistPath/$modlistName.$modlistEXT")
			ModPortalCount
			echo "Searching for \"$1\" = \"$2\""
			echo -en "Mods searched: \033[s"
			while [ $i -lt $i_max ]
			do
				echo -en "\033[u$i"

				result=$(jq -r ".results[$i].$1" "$modlistPath/$modlistName.$modlistEXT")
				if [ "$result:0:1" == "$2:0:1" ]; then
					if [ "$result" == "$2" ]; then
						#show only key info
						modDownload_url=$(jq -r ".results[$i].latest_release.download_url" "$modlistPath/$modlistName.$modlistEXT")
						fileName=$(jq -r ".results[$i].latest_release.file_name" "$modlistPath/$modlistName.$modlistEXT")
						modName=$(jq -r ".results[$i].name" "$modlistPath/$modlistName.$modlistEXT")
						modTitle=$(jq -r ".results[$i].title" "$modlistPath/$modlistName.$modlistEXT")
						echo ""
						echo ""
						echo "Mod matching condition \"$1\" = \"$2\" found:"
						echo "---------------------------------------------"
						echo "Mod Title = $modTitle"
						echo "Mod Name = $modName"
						echo "Download URL = $modAPIDomain$modDownload_url"
						echo "File Name = $fileName"
						echo ""
						echo -n "Proceed with download? (y/n): "
						read select
						if [ "$select" == "y" ]; then
							downloadModWrapper $modDownload_url $modName $fileName "$modTitle"
						fi
						let i=$i_max
					fi
				else
					let i=i+1
				fi
			done
		else
			echo "Modlist does not appear to exist"
		fi
	else
		echo "Modlist configuration directory not found, $progName may not be installed"
	fi
	echo ""
}
function ModPortalDownloadMod {
	#verify the modlist exists, download if not, and retrive given mod URL
	echo ""
	if [ -d $modlistPath ]; then
		if [ -e $modlistPath/$modlistName.$modlistEXT ]; then
			getModURL $1 "$2"
		else
			echo "Modlist does not appear to exist, attempting to download..."
			updateModList
			if [ -e $modlistPath/$modlistName.$modlistEXT ]; then
				getModURL $1 "$2"
			else
				echo "Failed to update Modlist"
			fi
		fi
	else
		echo "Modlist configuration directory not found, $progName may not be installed"
	fi
	echo ""
}
function FindMod {
	echo ""
	if [ -d $modlistPath ]; then
		if [ -e $modlistPath/$modlistName.$modlistEXT ]; then
			i=0
			#sort by first letter to speed up search
			#use $query:0:1 to get first letter
			i_max=$(jq -r ".results | length" "$modlistPath/$modlistName.$modlistEXT")
			ModPortalCount
			echo "Searching for \"$1\" = \"$2\""
			echo -en "Mods searched: \033[s"
			while [ $i -lt $i_max ]
			do
				echo -en "\033[u$i"

				result=$(jq -r ".results[$i].$1" "$modlistPath/$modlistName.$modlistEXT")
				if [ "$result" == "$2" ]; then
					eval ${3}
					#jq -r ".results[$i]" "$modlistPath/$modlistName.$modlistEXT"
					let i=$i_max
				else
					let i=i+1
				fi
			done
		else
			echo "Modlist does not appear to exist"
		fi
	else
		echo "Modlist configuration directory not found, $progName may not be installed"
	fi
	echo ""
}
function ModPortalStats {
	echo ""
	if [ -d $modlistPath ]; then
		if [ -e $modlistPath/$modlistName.$modlistEXT ]; then
			jq -r ".results[].$1" "$modlistPath/$modlistName.$modlistEXT"
		else
			echo "Modlist does not appear to exist, attempting to download..."
		fi
	else
		echo "Modlist configuration directory not found, $progName may not be installed"
	fi
	echo ""
}
function ModPortalCount {
	if [ -d $modlistPath ]; then
		if [ -e $modlistPath/$modlistName.$modlistEXT ]; then
			echo -n "Number of mods availble on remote server: "
			jq -r ".results | length" "$modlistPath/$modlistName.$modlistEXT"
		else
			echo "Modlist does not appear to exist"
		fi
	else
		echo "Modlist configuration directory not found, $progName may not be installed"
	fi
}
function ModPortalCountWrapper {
	echo ""
	ModPortalCount
	echo ""
}
function ListMods {
	echo ""
	if [ -d $modsDIR ]; then
		currentMods=$(ls $modsDIR)
		if [ "$currentMods" == "" ]; then
			echo "No mods are currently installed on the local system"
			echo "Use \"sudo $progName -m -g\" to download mods from the offical portal"
			echo "Or use \"sudo $progName -m -i\" to import mods on the local system into $progName"
		else
			echo "Mods currently available on local system:"
			for i in $(echo $(ls $modsDIR) | sed "s/,/ /g")
			do
			    echo " - $i"
			done
		fi
	else
		echo "Mods directory not found, $progName may not be installed"
	fi
	echo ""
}
function ImportMod {
	#extract mod name from path
	xbase=${1##*/}
	modName=${xbase%.*}
	echo -n "Importing mod \"$modName\"..."
	(cp $1 $modDIR/$modName)>NULL
	if [ -e $modDIR/$modName/$xbase]; then
		echo "SUCCESS"
	else
		echo "FAILED"
	fi
}
function ImportModWrapper {
	echo ""
	if [ "$1" == "" ]; then
		echo "No path provided"
	else
		if [ -e "$1" ]; then
			if [ -d "$1" ]; then
				if [ -d $modDIR ]; then
					#extract mod name from path
					xbase=${1##*/}
					modName=${xbase%.*}
					if [ -d $modDIR/$modName ]; then
						ImportMod "$1"
					else
						echo "No mod folder found for mod \"$modName\""
						echo -n "Creating mod folder..."
						(mkdir "$modsDIR/$modName")>NULL
						if [ -d "$modsDIR/$modName" ]; then
							echo "SUCCESS"
							ImportMod "$1"
						else
							echo "FAILED"
						fi
					fi
				else
					echo "Mods directory not found, $progName may not be installed"
				fi
			else
				echo "Invalid file format, provided file is a directory"
			fi
		fi
	fi
	echo ""
}
function GetModInfo {
	echo ""
	if [ -d $modlistPath ]; then
		if [ -e $modlistPath/$modlistName.$modlistEXT ]; then
			i=0
			#sort by first letter to speed up search
			#use $query:0:1 to get first letter
			i_max=$(jq -r ".results | length" "$modlistPath/$modlistName.$modlistEXT")
			ModPortalCount
			echo "Searching for \"$1\" = \"$2\""
			echo -en "Mods searched: \033[s"
			while [ $i -lt $i_max ]
			do
				echo -en "\033[u$i"

				result=$(jq -r ".results[$i].$1" "$modlistPath/$modlistName.$modlistEXT")
				if [ "$result:0:1" == "$2:0:1" ]; then
					if [ "$result" == "$2" ]; then
						#show only key info
						echo ""
						echo ""
						echo "===================================="
						echo ""
						echo -n "Name: "
						jq -r ".results[$i].latest_release.info_json.name" "$modlistPath/$modlistName.$modlistEXT"
						echo -n "Author: "
						jq -r ".results[$i].latest_release.info_json.author" "$modlistPath/$modlistName.$modlistEXT"
						echo -n "Description: "
						jq -r ".results[$i].latest_release.info_json.description" "$modlistPath/$modlistName.$modlistEXT"

						echo ""
						echo -n "Target Factorio Version: "
						jq -r ".results[$i].latest_release.info_json.factorio_version" "$modlistPath/$modlistName.$modlistEXT"
						echo -n "Current Mod Version: "
						jq -r ".results[$i].latest_release.info_json.version" "$modlistPath/$modlistName.$modlistEXT"
						echo -n "Current Mod Version Downloads: "
						jq -r ".results[$i].latest_release.downloads_count" "$modlistPath/$modlistName.$modlistEXT"
						echo -n "Lifetime Mod Downloads: "
						jq -r ".results[$i].downloads_count" "$modlistPath/$modlistName.$modlistEXT"

						echo ""
						echo "Dependencies: "
						k=0
						k_max=$(jq -r ".results[$i].latest_release.info_json.dependencies | length" "$modlistPath/$modlistName.$modlistEXT")
						while [ $k -lt $k_max ]
						do
							echo -n " - "
							jq -r ".results[$i].latest_release.info_json.dependencies[$k]" "$modlistPath/$modlistName.$modlistEXT"
							let k=$k+1
						done

						echo ""
						echo "===================================="
						#jq -r ".results[$i]" "$modlistPath/$modlistName.$modlistEXT"
						let i=$i_max
					fi
				else
					let i=i+1
				fi
			done
		else
			echo "Modlist does not appear to exist, attempting to download..."
		fi
	else
		echo "Modlist configuration directory not found, $progName may not be installed"
	fi
	echo ""
}

#modPacks
function parseModPackCMDS {
	case $1 in
		-c)
			createModPack $2
			;;
		-d)
			deleteModPack $2
			;;
		-a)
			addModToModPack $2 $3
			;;
		-r)
			removeModFromModPack $2 $3
			;;
		-i)
			infoModPack $2
			;;
		*)
			ListModPacks $2
			;;
	esac
}
function createModPack {
	echo ""
	if [ -d $modPackDIR ]; then
		if [ -d "$modPackDIR/$1" ]; then
			echo "A Mod Pack by the name \"$1\" already exists"
		else
			echo -n "Creating Mod Pack \"$1\"..."
			mkdir "$modPackDIR/$1"
			if [ -d "$modPackDIR/$1" ]; then
				echo "SUCCESS"
			else
				echo "FAILED"
			fi
		fi
	else
		echo "Mod Pack directory not found, $progName may not be installed"
	fi
	echo ""
}
function deleteModPack {
	echo ""
	if [ -d $modPackDIR ]; then
		if [ -d "$modPackDIR/$1" ]; then
			echo -n "Are you sure you want to delete the Mod Pack \"$1\"? (Y/n): "
			read select

			if [ $select == "Y" ]; then
				echo -n "Deleting Mod Pack \"$1\"..."
				rm -r "$modPackDIR/$1"
				if [ -d "$modPackDIR/$1" ]; then
					echo "SUCCESS"
				else
					echo "FAILED"
				fi
			fi
		else
			echo "No Mod Pack by the name \"$1\" exists"
		fi
	else
		echo "Mod Pack directory not found, $progName may not be installed"
	fi
	echo ""
}
function addModToModPack {
	echo ""
	if [ -d $modPackDIR ]; then
		if [ -d "$modPackDIR/$1" ]; then
			if [ -e "$modPackDIR/$1/$2.zip" ]; then
				echo "A Mod by the name \"$2\" already exists in the Mod Pack \"$1\""
			else
				if [ -e "$modsDIR/$2.zip" ]; then
					echo "Are you sure you want to add the Mod $2"
					echo -n "to the Mod Pack \"$1\"? (y/n): "
					read select

					if [ $select == "y" ]; then
						echo -n "Adding Mod \"$2\" to Mod Pack \"$1\"..."
						cp "$modsDIR/$2.zip" "$modPackDIR/$1/"
						if [ -e "$modPackDIR/$1/$2" ]; then
							echo "SUCCESS"
						else
							echo "FAILED"
						fi
					fi
				else
					echo "No Mod by the name \"$2\" exists on the local system"
				fi
			fi
		fi
	else
		echo "Mod Pack directory not found, $progName may not be installed"
	fi
	echo ""
}
function removeModFromModPack {
	echo ""
	if [ -d $modPackDIR ]; then
		if [ -d "$modPackDIR/$1" ]; then
			if [ -e "$modPackDIR/$1/$2" ]; then
				echo "Are you sure you want to remove the Mod $2"
				echo -n "from the Mod Pack \"$1\"? (Y/n): "
				read select

				if [ $select == "Y" ]; then
					echo -n "Removing Mod \"$2\" from Mod Pack \"$1\"..."
					rm -r "$modPackDIR/$1/$2"
					if [ -e "$modPackDIR/$1/$2" ]; then
						echo "SUCCESS"
					else
						echo "FAILED"
					fi
				fi
			else
				echo "No Mod by the name \"$2\" exists in the Mod Pack \"$1\""
			fi
		else
			echo "No Mod Pack by the name \"$1\" exists"
		fi
	else
		echo "Mod Pack directory not found, $progName may not be installed"
	fi
	echo ""
}
function infoModPack {
	echo ""
	if [ -d $modPackDIR ]; then
		if [ -d "$modPackDIR/$1" ]; then
			echo "Name: $1"
			k=0
			for i in $(echo $(ls "$modPackDIR/$1") | sed "s/,/ /g")
			do
					let k=k+1
			done
			echo "# of Mods: $k"
			if [ $k -gt 1 ]; then
				echo ""
				echo "List of included Mods:"
				for i in $(echo $(ls "$modPackDIR/$1") | sed "s/,/ /g")
				do
						echo " - $i"
				done
			fi
		else
			echo "No Mod Pack by the name \"$1\" exists"
		fi
	else
		echo "Mod Pack directory not found, $progName may not be installed"
	fi
	echo ""
}
function ListModPacks {
	echo ""
	if [ -d $modPackDIR ]; then
		echo "Existing Mod Packs:"
		for i in $(echo $(ls $modPackDIR) | sed "s/,/ /g")
		do
				echo " - $i"
		done
	else
		echo "Mod Pack directory not found, $progName may not be installed"
	fi
	echo ""
}

#Versions
function parseVersionsCMDS {
	case $1 in
		-u)
			getLatestVersion
			;;
		-d)
			getVersion $2
			;;
		-r)
			listRemoteVersionWrapper $2
			;;
		*)
			ListVersions $2
			;;
	esac
}
function ListVersions {
	echo ""
	if [ -d $versionsDIR ]; then
		currentVerisons=$(ls $versionsDIR)
		if [ "$currentVerisons" == "" ]; then
			echo "No versions are currently installed on the local system"
			echo "Use \"sudo $progName -u\" to download the latest version"
		else
			echo "Versions currently available on local system:"
			for i in $(echo $(ls $versionsDIR) | sed "s/,/ /g")
			do
			    echo " - $i"
			done
		fi
	else
		echo "Versions directory not found, $progName may not be installed"
	fi
	echo ""
}
function determineLatestVersion {
	VER_LATEST=0.15.0
}
function getLatestVersion {
	echo ""
	echo "Checking for latest version..."
	echo ""
}
function listRemoteVersionWrapper {
	echo ""
	echo "Versions available on remote server: "

	if [ -z $1 ]; then
		listRemoteVersion $1
	else
		k=11
		while [ $k -lt $verMax ]
		do
			let k=k+1
			listRemoteVersion $k
		done
	fi

	echo ""
}
function listRemoteVersion {
	i=0
	while [ $i -lt $verMax ]
	do
		let i=i+1
		VER=0.$1.$i
		URL=$urlPrefix/$VER/$urlTail
		if [[ $(wget $URL -O-) ]] 2>/dev/null; then
			echo " - $VER"
		fi
	done
}
function logfileCheck {
	if [ -e $downloadLogFile ]; then
		echo ""
		echo "Do you want to read the log file? (y/n): "
		read select
		if [ "$select" == "y" ]; then
			$editor $downloadLogFile
		fi
		echo ""
	fi
}
function getVersion {
	VER="$1"

	if [ "$VER" == "" ]; then
		getLatestVersion
	else
		echo ""
		if [ -d "$versionsDIR/$VER" ]; then
			echo "Version $VER appears to already exist on the local system"
			echo -n "Do you want to re-download this version? (y/n)"
			read select
		else
			if [ -d $versionsDIR ]; then
				URL=$urlPrefix/$VER/$urlTail
				echo -n "Searching for verison $VER on remote system..."
				if [[ $(wget $URL -O-) ]] 2>/dev/null; then
					echo "SUCCESS"
					echo -n "Downloading factorio headless server version $VER to local system..."
					(echo "")>>$downloadLogFile
					(echo "")>>$downloadLogFile
					(date +%Y%m%d%H%M%S)>>$downloadLogFile
					(echo "")>>$downloadLogFile
					wget $URL --output-document "$baseDIR/$VER.tar.gz" -a $downloadLogFile
					if [ -e "$baseDIR/$VER.tar.gz" ]; then
						echo "SUCCESS"

						echo -n "Unpacking headless server..."
						(echo "")>>$downloadLogFile
						(tar -xf "$baseDIR/$VER.tar.gz" -C $versionsDIR)>>$downloadLogFile
						if [ -d "$versionsDIR/$tarName" ]; then
							echo "SUCCESS"

							echo -n "Configuring headless server..."
							mv "$versionsDIR/$tarName" "$versionsDIR/$VER"
							if [ -d "$versionsDIR/$VER" ]; then
								echo "SUCCESS"

								echo -n "Cleaning up..."
								if [ -e "$versionsDIR/$VER.tar.gz" ]; then
									rm "$versionsDIR/$VER.tar.gz"
									if [ -e "$versionsDIR/$VER.tar.gz" ]; then
										echo "FAILED"
										logfileCheck
									else
										echo "SUCCESS"
									fi
								else
									echo "SUCCESS"
								fi
								echo ""
								echo "DONE"
							else
								echo "FAILED"
								logfileCheck
							fi
						else
							echo "FAILED"
							logfileCheck
						fi
					else
						echo "FAILED"
						logfileCheck
					fi
				else
					echo "FAILED"
					echo "Version $VER of the factorio headless server is not available on the remote system"
				fi
			else
					echo "Versions directory not found, $progName may not be installed"
			fi
		fi
		echo ""
	fi
}

#run
function parseVersionsCMDS {
	case $1 in
		-s)
			Run $2 $3 $4 $5
			;;
		-k)
			killServer $2
			;;
		*)
			ListProfiles
			;;
	esac
}
function startServer {
	if [ screen -S $progName-$1 -Q select . ]; then
		echo "A server by the name \"$1\" is already running"
	else
		screen -dm -S $progName-$1 "$2" "$execPath"
	fi
}
function killServer {
	if [ screen -S $progName-$1 -Q select . ]; then
		echo ""
		echo "No server by the name $1 are currently running"
		echo ""
	else
		screen -S $progName-$1 -X quit
	fi
}
function Run {
	logPath="$baseDir/factMgr.log"
	if ! [ -z "$4" ]; then
		SAVEINT="$4"
		AUTO="$AutoSaveIntCMD $SAVEINT"
	else
		AUTO=""
	fi

	if [ -z $1 ] || [ -z $2 ]; then
		Syntax
	else
		mapName="$1.$saveExt"
		VER=$2
		if [ -e "$savesDIR/$mapName" ]; then
			SAVE="$savesDIR/$mapName"
		else
			ERRORMSG="Specified save file does not exist"
		fi
		if [ -z "$3" ]; then
			MOD=""
		else
			MODPATH="$modPackDIR/$3"
			#echo $modPackDIR
			#echo "$MODPATH"
			if [ -d "$MODPATH" ]; then
				if [ "$(ls -A $MODPATH)" ]; then
				   MOD="$MODPATH"
				else
				   ERRORMSG="Specified Mod pack is empty"
				fi
			else
				ERRORMSG="Specified Mod pack does not exist"
			fi
		fi
		if [ -z "$ERRORMSG" ]; then

			echo "Factorio" $VER " started using map:" $SAVE
			if [ "$MOD" = "" ]; then
				startServer $SAVE "$versionsDIR/$VER/$runFile $startCMD $SAVE $AUTO"

			else
				startServer $SAVE "$versionsDIR/$VER/$runFile $startCMD $SAVE $setModCMD $MOD $AUTO"
				echo "Using Mod pack: $MOD"
			fi
			if ! [ "$AUTO" = "" ]; then
				echo "Set auto save interval to $AUTO"
			fi
			echo "Connect using UDP on port 34197"
		else
			echo "ERROR: "$ERRORMSG
		fi
	fi
}

#Developer
function devCMDs {
	case $1 in
		-v)
			progVersion
			;;
		-ms)
			ModPortalStats $2
			;;
		-mi)
			GetModInfo $2 $3
			;;
		-mc)
			ModPortalCountWrapper
			;;
		-mg)
			ModPortalGetMod $2 $3
			;;
		-md)
			ModPortalDownloadMod $2 $3
			;;
		-1)
			updateModList
			;;
		*)
			secret
			;;
	esac
}
function progVersion {
	echo "$ProgVer"
}
function secret {
	echo ""
	echo "This is a Bunny, and he is unimpressed that you found his secret command"
	echo ""
	echo "(\(\\"
	echo "(- -)"
	echo "((‘)((‘)"
	echo ""
}
#MAIN

init

if [[ $EUID -ne 0 ]]; then
	echo "ERROR: Either you do not have root privilages or you forgot to use Sudo (probably the latter :P)"
else
	case $1 in
		-s)
			parseSaveCMDS $2 $3 $4
			;;
		-install)
			Install
			;;
		-version)
			progVersion
			;;
		-update)
			Update $2
			;;
		-verify)
			verifyRespond $2
			;;
		-uninstall)
			Uninstall
			;;
		-config)
			Config
			;;
		-dev)
			devCMDs $2 $3 $4
			;;
		-m)
			parseModsCMDS $2 $3 $4 $5
			;;
		-mp)
			parseModPackCMDS $2 $3 $4
			;;
		-v)
			parseVersionsCMDS $2 $3 $4
			;;
		-r)
			parseProfileCMDS $2 $3 $4 $5 $6
			;;
		-secret)
			secret
			;;
		*)
			Syntax
			;;
	esac
fi
