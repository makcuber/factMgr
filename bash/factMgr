#!/bin/bash

#Developer: Mak Cuber
#DC: 7/30/10/2016
#UD1: 1/31/10/2016

#VARIABLES
execPath="$0"
OpSys=$(uname -rv)
verboseOn="1"

#defaults
progName=factMgr
configSuffix=conf
SAVEINT=20
BinPathDEF="/bin/"
ConfigPathDEF="/etc/$progName"
RunPathDEF="/var/factorio"
binFileDEF="/bin/$progName"
configFileDEF="$ConfigPathDEF/$progName.$configSuffix"

#Directories
baseDir=$RunPathDEF
versionsDIR=$baseDir/versions
mapsDIR=$baseDir/maps
modsDIR=$baseDir/mods
savesDIR=$baseDir/saves

#file names
runFile=/bin/x64/factorio
downloadFILE=linux64

#commands
createSaveCMD=--create
AutoSaveIntCMD=--autosave-interval
startCMD=--start-server
setModCMD=--mod-directory

#rcon
PASS=hello
rconPORT=7890

#FUNCTIONS
function verbose {
	if [ "$verboseOn" = "1" ]; then
		if ! [ -z $1 ]; then
			var_name=(${!1@})
			echo $var_name"="$1
		fi
	fi
}
function init {
	if ! [ -e $binFileDEF ]; then
		echo "tmp"
	fi
	if ! [ -e $configFileDEF ]; then
		echo "tmp"
	fi
	BinPath="/bin/"
	ConfigPath="/etc/$progName"
	RunPath="/var/factorio"

	baseDir=$RunPath
	versionsDIR=$baseDir/versions
	mapsDIR=$baseDir/maps
	modsDIR=$baseDir/mods
	savesDIR=$baseDir/saves

	configFile="$ConfigPath/$progName.conf"
}
function Syntax {
	echo ""
	echo "Syntax: $progName [-{install:remove:s:k:u:d:c:v:s:m:h}] [args]"
	echo ""
	echo "	-install	[BinPath] [ConfigPath] [RunPath]			Install $progName"
	echo "	-remove									Uninstall $progName"
	echo "	-r		[MapName] [Version#] [ModPackName]			Start server"
	echo "	-k 									Stop server"
	echo "	-u 									Update to latest version"
	echo "	-d		[Version#]						Download specific version"
	echo "	-c		[name]							Create new save"
	echo ""
	echo "	-v 		[Version#]						List downloaded versions"
	echo "	-s 		[MapName]						List saves"
	echo "	-m 		[ModName]						List mods"
	echo ""
	echo "	-h									Show this help page"
	echo ""
}
function Uninstall {
	if [ -e "$BinPath/$progName" ]; then
		echo "$progName does not appear to be installed on this system"
		echo "Uninstallation cancelled"
	else
		read "Uninstall $progName script? (y/n):" select
		if [ $select = "y" ]; then
			rm "$BinPath/$progName"
			if [ -e "$BinPath/$progName" ]; then
				echo "Uninstallation failed!"
			else
				echo "Uninstallation suceeded"
			fi
		else
			echo "Uninstallation cancelled"
		fi
	fi

	if [ -e "$ConfigPath/$progName" ]; then
		echo "$progName does not appear to be installed on this system"
		echo "Uninstallation cancelled"
	else
		read "Uninstall $progName script? (y/n):" select
		if [ $select = "y" ]; then
			rm "$BinPath/$progName"
			if [ -e "$BinPath/$progName" ]; then
				echo "Uninstallation failed!"
			else
				echo "Uninstallation suceeded"
			fi
		else
			echo "Uninstallation cancelled"
		fi
	fi
}
function installScript {
	echo "Installing script..."
	cat "$execPath" > "$BinPath/$progName"
	echo "Creating configuration files..."
	if ! [ -d "$ConfigPath" ]; then
		mkdir "$ConfigPath"
	fi
	if ! [ -e "$ConfigPath" ]; then
		touch "$ConfigPath/$progName.conf"
		(echo "$conf")>>"$ConfigPath/$progName.conf"
	fi
}
function Install {
	if [ "$1" == "" ]; then
		BinPath="$BinPathDEF"
	else
		BinPath="$1"
	fi
	if [ "$2" == "" ]; then
		ConfigPath="$ConfigPathDEF"
	else
		ConfigPath="$2"
	fi
	if [ "$3" == "" ]; then
		RunPath="$RunPathDEF"
	else
		RunPath="$3"
	fi

	echo "Will install script to: 				$BinPath"
	echo "Creating configuration file in: $ConfigPath"
	echo "Creating file structure in: 		$RunPath"
	echo ""
	read "Install with this configuration? (y/n):" select
	if [ "$select" = "y" ]; then
		#install scripts
		echo "Checking for existing installation..."
		if [ -e "$BinPath/$progName" ]; then
				echo "$progName Script appears to already be installed on this system"
				read "Do you want to reinstall the script? (y/n):" select
				if [ "$select" = "y" ]; then
					installScript
				else
					echo "Skipping script installation"
				fi
		else
			installScript
		fi

		#generate configuration files
		echo "Checking for existing configuration files..."
		if [ -e "$configFile" ]; then
				echo "A $progName configuration file appears to already exist on this system"
				read "Do you want overwrite the existing configuration file? (y/n):" select
				if [ "$select" = "y" ]; then
					installConfig
				else
					echo "Skipping configuration generation"
				fi
		else
			echo "Checking for existing configuration directory..."
			if [ -d $ConfigPath ]; then
				installScript
			else
				echo "Creating configuration directory..."
				if [ -d $ConfigPath ]; then
					installScript
				else
					echo "ERROR: Failed to create configuration directory! :("
				fi
			fi

		fi

	else
		echo "Installation cancelled"
	fi
}
function Saves {
	if [ -z $1 ]; then
		ls $versionsDIR
	else
		check=$(ls $versionsDIR | grep $1)
		if [ -z $check ]; then
			echo $1 "is not available on the local system"
			echo "Do you want to download this version? (y/n)"

		else
			echo $1 "is available on the local system"
		fi
	fi
}
function MakeMap {
	VER=$(checkVer($1))
	NAME=$(checkSave($2))

	$versionsDIR/$VER/$runFile $createSaveCMD $savesDIR/$NAME
}
function Versions {
	if [ -d versionsDIR ]; then
		echo "tmp"
	else
		echo "Versions directory not found, $progName may not be installed"
	fi
}
function Mods {
	echo "tmp"
}
function getVersion {
	VER="$1"

	if [ -z "$VER" ]; then
		echo "Checking for latest version"
		getLatestVersion
	else
		if [ -d "$versionsDIR/$VER" ]; then
			echo "Version $VER appears to already exist on the local system"
			read "Do you want to re-download this version? (y/n)" select
		else
			if [ $(wget --spider -v "") ]; then
				wget $URL --output-document "$versionsDIR/tmp.tar.gz" &&
				tar -xzf "$versionsDIR/$VER" &&
				rm "$versionsDIR/tmp.tar.gz"
			else
					echo "tmp"
			fi
		fi
	fi
}
function Run {
	logPath="$baseDir/factMgr.log"
	if ! [ -z "$4" ];then
		SAVEINT="$4"
		AUTO="$AutoSaveIntCMD $SAVEINT"
	else
		AUTO=""
	fi

	if [ -z $1 ] || [ -z $2 ]; then
		Syntax
	else
		mapName="$1.zip"
		VER=$2
		if [ -e "$savesDIR/$mapName" ]; then
			SAVE="$savesDIR/$mapName"
		else
			ERRORMSG="Specified save file does not exist"
		fi
		if [ -z "$3" ]; then
			MOD=""
		else
			MODPATH="$modDIR/$3"
			echo "$MODPATH"
			if [ -d "$MODPATH" ]; then
				if [ "$(ls -A /path/to/dir)" ]; then
				   MOD="$MODPATH"
				else
				   ERRORMSG="Specified Mod pack is empty"
				fi
			else
				ERRORMSG="Specified Mod pack does not exist"
			fi
		fi
		if [ -z "$ERRORMSG" ]; then
			($versionsDIR/$VER/$runFile $startCMD $SAVE $setModCMD $MOD $AUTO &)>"$logPath"
			echo "Factorio" $VER " started using map:" $SAVE
			if ! [ "$MOD" = "" ]; then
				echo "Using Mod pack: $MOD"
			fi
			if ! [ "$AUTO" = "" ]; then
				echo "Set auto save interval to $AUTO"
			fi
			echo "Connect using UDP on port 34197"
		else
			echo "ERROR: "$ERRORMSG
		fi
	fi
}
function secret {
	echo "This is a Bunny, and he is unimpressed that you found his secret command"
	echo ""
	echo "(\(\\"
	echo "(- -)"
	echo "((‘)((‘)"
}
#MAIN

if [[ $EUID -ne 0 ]]; then
	echo "ERROR: Either you do not have root privilages or you forgot to use Sudo (probably the latter :P)"
else
	case $1 in
		-s)
			Saves $2
			;;
		-u)
			getVersion $2
			;;
		-install)
			Install
			;;
		-remove)
			Uninstall
			;;
		-m)
			Mods $2
			;;
		-v)
			Versions $2
			;;
		-r)
			Run $2 $3 $4 $5
			;;
		-secret)
			secret
			;;
		*)
			Syntax
			;;
	esac
fi
