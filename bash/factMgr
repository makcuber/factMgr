#!/bin/bash +e

#Developer: Mak Cuber
#DC: 7/30/10/2016
#UD: 1/31/10/2016
#UD: 2/17/1/2017
#UD: 3/18/1/2017
#UD: 4/19/1/2017
#UD: 5/28/1/2017
#UD: 2/31/1/2017
#UD: 4/2/2/2017
#UD: 4/2/3/2017
#UD: 5/3/3/2017

#VARIABLES
execPath="$0"
OpSys=$(uname -rv)
verboseOn="1"
ProgVer="0.0.3"

#defaults
progName=factMgr
configSuffix=conf
SAVEINT=20
BinPathDEF="/bin/"
ConfigPathDEF="/etc/$progName"
RunPathDEF="/var/factorio"
binFileDEF="/bin/$progName"
configFileDEF="$ConfigPathDEF/$progName.$configSuffix"
modlistPathDEF=$ConfigPathDEF/modlist
saveExtDEF="zip"
editorDEF="nano"
tarNameDEF="factorio"
downloadLogFileDEF="$baseDIR/download.log"
VER_LATEST_DEF=0.14.10

runFileDEF=/bin/x64/factorio
downloadFileDEF=linux64

urlDEF=https://www.factorio.com/get-download
urlTailDEF=headless/$downloadFileDEF
modlistEXTDEF=json
modlistNameDEF=modlist
modlistSizeDEF=2000
modlistURLDEF=https://mods.factorio.com/api/mods?page_size=$modlistSizeDEF

#Directories
baseDir=$RunPathDEF
versionsDIR=$baseDir/versions
mapsDIR=$baseDir/maps
modsDIR=$baseDir/mods
savesDIR=$baseDir/saves

#commands
createSaveCMD=--create
AutoSaveIntCMD=--autosave-interval
startCMD=--start-server
setModCMD=--mod-directory

#rcon
PASS=hello
rconPORT=7890

#FUNCTIONS
function verbose {
	if [ "$verboseOn" = "1" ]; then
		if ! [ -z $1 ]; then
			var_name=(${!1@})
			echo $var_name"="$1
		fi
	fi
}
function Syntax {
	echo ""
	echo "Syntax: $progName [Cmd] [subCmd] [args]"
	echo ""
	echo "===Configuration==="
	echo "	-install	[BinPath] [ConfigPath] [RunPath]	Install $progName"
	echo "	-uninstall						Uninstall $progName"
	echo "	-config							Edit configuration file"
	echo ""
	echo "===Server Control==="
	echo "	-r		[MapName] [#.#.#] [ModPackName]		Start server"
	echo "	-k 							Stop server"
	echo "	-p		[ProfileName]				Create a server profile"
	echo ""
	echo "===Versions==="
	echo "	-v 							Version commands"
	echo "	   -l 						   	   List local versions"
	echo "	   -u 						   	   Get latest version"
	echo "	   -d 		[#.#.#]			   	   	   Download a version"
	echo ""
	echo "===Saves==="
	echo "	-s 							Saves commands"
	echo "	   -l 						   	   List available saves"
	echo "	   -n		[#.#.#] [name]				   Create new save"
	echo "	   -d 		[#.#.#]			   	   	   Delete a save"
	echo ""
	echo "===Mods==="
	echo "	-m 							Mods commands"
	echo "	   -l 						   	   List mods & mod packs"
	echo "	   -g 		[ModName]			   	   Download a mod"
	echo "	   -i 		[FilePath]			   	   Import a mod"
	echo ""
	echo "===Help==="
	echo "	-h		[command]				Show this help page"
	echo ""
}

#Uninstall
function Uninstall {
	if [ -e "$BinPath/$progName" ]; then
		echo "$progName does not appear to be installed on this system"
		echo "Uninstallation cancelled"
	else
		echo -n "Uninstall $progName script? (y/n):"
		read select
		if [ $select = "y" ]; then
			rm "$BinPath/$progName"
			if [ -e "$BinPath/$progName" ]; then
				echo "Uninstallation failed!"
			else
				echo "Uninstallation suceeded"
			fi
		else
			echo "Uninstallation cancelled"
		fi
	fi

	if [ -e "$ConfigPath/$progName" ]; then
		echo "$progName does not appear to be installed on this system"
		echo "Uninstallation cancelled"
	else
		echo -n "Uninstall $progName script? (y/n):"
		read select
		if [ $select = "y" ]; then
			rm "$BinPath/$progName"
			if [ -e "$BinPath/$progName" ]; then
				echo "Uninstallation failed!"
			else
				echo "Uninstallation suceeded"
			fi
		else
			echo "Uninstallation cancelled"
		fi
	fi
}

#configuration
function init {
	#add config file load and parse here
	BinPath="$BinPathDEF"
	ConfigPath="$ConfigPathDEF"
	RunPath="$RunPathDEF"

	baseDir=$RunPath
	versionsDIR=$baseDir/versions
	mapsDIR=$baseDir/maps
	modsDIR=$baseDir/mods
	savesDIR=$baseDir/saves
	VER_LATEST=$VER_LATEST_DEF

	runFile=/bin/x64/factorio
	downloadFILE=linux64
	configFile=$configFileDEF
	URL=$urlDEF
	urlTail=$urlTailDEF
	saveExt=$saveExtDEF
	editor=$editorDEF
	tarName=$tarNameDEF
	downloadLogFile=$downloadLogFileDEF
	modlistURL=$modlistURLDEF
	modlistPath=$modlistPathDEF
	modlistEXT=$modlistEXTDEF
	modlistName=$modlistNameDEF
}
function writeConf {
	touch "$configFile"
	(echo "$conf")>>"$configFile"
}
function Config {
	if [ -e "$configFile" ]; then
		$editor $configFile
	else
		echo ""
		echo "No configuration file was found"
		echo -n "Do you want to generate a new configuration file? (y/n):"
		read select
		if [ "$select" == "y" ]; then
			writeConf
			if [ -e "$configFile" ]; then
				$editor $configFile
			else
				echo ""
				echo "Something went wrong, configuration file could not be created :("
			fi
		fi
		echo ""
	fi
}

#Install
function installScript {
	echo "Installing script..."
	cat "$execPath" > "$BinPath/$progName"
	echo "Creating executable..."
	chmod +x "$BinPath/$progName"
}
function installConfig {
	#config
	echo ""
	echo "Checking for existing configuration directory..."
	if ! [ -d "$ConfigPath" ]; then
		echo "Creating configuration directory..."
		mkdir "$ConfigPath"
		if ! [ -d "$modlistPath" ]; then
			echo "Creating modlist directory..."
			mkdir "$modlistPath"
		fi
	fi
	echo "Checking for existing configuration files..."
	if [ -e "$configFile" ]; then
			echo "A $progName configuration file appears to already exist on this system"
			echo -n "Do you want overwrite the existing configuration file? (y/n): "
			read select
			if [ "$select" = "y" ]; then
				writeConf
			else
				echo "Skipping configuration file generation"
			fi
	else
		echo "Creating configuration file..."
		writeConf
	fi
}
function installFileStructure {
	#file structure
	echo ""
	echo "Checking for existing file structure..."
	if ! [ -d "$RunPath" ]; then
		echo "Building file structure:"
		mkdir "$RunPath"
	else
		echo "Verifying file structure:"
	fi

	buildVerifyFolder $RunPath versions
	buildVerifyFolder $RunPath saves
	buildVerifyFolder $RunPath mods
	buildVerifyFolder $RunPath modPacks
}
function buildVerifyFolder {
	echo -n "	$2 folder..."
	if ! [ -d "$1" ]; then
		echo "BUILT"
		mkdir "$1"/"$2"
	else
		echo "FOUND"
	fi
}
function Install {
	if [ "$1" == "" ]; then
		BinPath="$BinPathDEF"
	else
		BinPath="$1"
	fi
	if [ "$2" == "" ]; then
		ConfigPath="$ConfigPathDEF"
	else
		ConfigPath="$2"
	fi
	if [ "$3" == "" ]; then
		RunPath="$RunPathDEF"
	else
		RunPath="$3"
	fi

	#script
	echo ""
	echo "Will install script to:			$BinPath"
	echo "Creating configuration file in: 	$ConfigPath"
	echo "Creating file structure in:		$RunPath"
	echo ""
	echo -n "Install with this configuration? (y/n): "
	read select
	if [ "$select" = "y" ]; then
		#install scripts
		echo ""
		echo "Checking for existing installation..."
		if [ -e "$BinPath/$progName" ]; then
				echo "$progName Script appears to already be installed on this system"
				echo -n "Do you want to reinstall the script? (y/n): "
				read select
				if [ "$select" = "y" ]; then
					installScript
				else
					echo "Skipping script installation"
				fi
		else
			installScript
		fi

		#generate configuration files
		installConfig

		#build file structure
		installFileStructure

		echo ""
		echo "DONE"
		echo ""
	else
		echo "Installation cancelled"
	fi
}

#Saves
function parseSaveCMDS {
	case $1 in
		-n)
			MakeMap $2 $3
			;;
		-d)
			delMap $2
			;;
		*)
			ListSaves $2
			;;
	esac
}
function ListSaves {
	echo ""
	if [ -d $savesDIR ]; then
		currentSaves=$(ls $savesDIR)
		if [ "$currentSaves" == "" ]; then
			echo "No saves are currently installed on the local system"
			echo "Use \"sudo $progName -m\" to generate a new save game"
		else
			echo "Saves currently available on local system:"
			for i in $(echo $(ls $savesDIR) | sed "s/,/ /g")
			do
			    echo " - $i"
			done
		fi
	else
		echo "Saves directory not found, $progName may not be installed"
	fi
	echo ""
}
function genMap {
	VER=$1
	NAME=$2

	echo "Version: $VER"
	echo "Name: $NAME"
	echo ""
	echo -n "Generate new map with these parameters? (y/n): "
	read select
	if [ "$select" = "y" ]; then
		echo ""
		echo "Generating new map \"$NAME\" using version $VER..."
		echo ""
		$versionsDIR/$VER/$runFile $createSaveCMD $savesDIR/$NAME
		echo ""
		if [ -e $savesDIR/$NAME.$saveExt ]; then
			echo "SUCCESS"
		else
			echo "FAILED"
			echo ""
			echo "It appears that something went wrong :("
		fi
	fi
}
function mapGenNameCheck {
	VER=$1
	NAME=$2

	if [ -d $versionsDIR/$VER ]; then
		if [ -e $versionsDIR/$VER/$runFile ]; then
			if [ -e "$savesDIR/$NAME.$saveExt" ]; then
				i=1;
				while [ -e "$savesDIR/$NAME_$i.$saveExt" ]; do
					let i=i+1
				done
				NAME+="_$i"
				genMap $VER $NAME
			else
				genMap $VER $NAME
			fi
		else
			echo "Version $VER appears to be corupted, executable is missing"
		fi
	else
		echo "Version $VER is not available on the local system"
	fi
}
function MakeMap {
	VER=$1
	NAME=$2

	echo ""
	if [ -d $versionsDIR ]; then
		if [ -d $savesDIR ]; then
			if [ "$VER" == "" ]; then
				mapGenNameCheck $VER $NAME
			else
				echo "No Version specified"
				echo ""
				echo -n "Use latest version? (y/n): "
				read select
				if [ "$select" == "y" ]; then
					determineLatestVersion
					mapGenNameCheck $VER_LATEST $NAME
				fi
			fi
		else
			echo "Saves directory not found, $progName may not be installed"
		fi
	else
		echo "Versions directory not found, $progName may not be installed"
	fi
	echo ""
}
function delMap {
	NAME=$1

	echo ""
	if [ -d $savesDIR ]; then
		if [ -e $savesDIR/$NAME.$saveExt ]; then
			echo -n "Are you sure you want to the delete the save file \"$NAME\"? (y/n): "
			read select
			if [ "$select" = "y" ]; then
				echo ""
				echo -n "Deleting save file \"$NAME\"..."
				rm -r "$savesDIR/$NAME.$saveExt"
				if [ -e $savesDIR/$NAME.$saveExt ]; then
					echo "FAILED"
				else
					echo "SUCCESS"
				fi
			else
				echo ""
				echo "Deletion cancelled"
			fi
		else
			echo "No save file by the name of \"$NAME\" exists on the local system"
		fi
		echo ""
	else
		echo "Saves directory not found, $progName may not be installed"
	fi
}

#Mods
function parseModsCMDS {
	case $1 in
		-g)
			GetMod $2
			;;
		-i)
			ImportMod $2
			;;
		*)
			ListMods $2
			;;
	esac
}
function updateModList {
	echo ""
	if [ -d $modlistPath ]; then
		echo -n "Connecting to remote mods database..."
		if [[ $(wget $modlistURL -O-) ]] 2>/dev/null; then
			echo "SUCCESS"

			if [ -e "$modlistPath/$modlistName.$modlistEXT" ]; then
				echo "Creating backup of old modlist data..."
				NOW=$(date +%Y-%m-%d-%-H-%M-%S)
				mv "$modlistPath/$modlistName.$modlistEXT" "$modlistPath/$modlistName-$NOW.$modlistEXT"
			fi

			echo -n "Downloading modlist data..."
			wget $modlistURL --output-document "$modlistPath/$modlistName.$modlistEXT" -a $downloadLogFile
			if [ -e $modlistPath/$modlistName.$modlistEXT ]; then
				echo "SUCCESS"
			else
				echo "FAILED"
			fi
		else
			echo "FAILED"
		fi
	else
		echo "Modlist configuration directory not found, $progName may not be installed"
	fi
	echo ""
}
function ModPortalGetMod {
	echo ""
	if [ -d $modlistPath ]; then
		if [ -e $modlistPath/$modlistName.$modlistEXT ]; then
			jq -r ".results[$1].$2" "$modlistPath/$modlistName.$modlistEXT"
		else
			echo "Modlist does not appear to exist, attempting to download..."
		fi
	else
		echo "Modlist configuration directory not found, $progName may not be installed"
	fi
	echo ""
}
function ModPortalStats {
	echo ""
	if [ -d $modlistPath ]; then
		if [ -e $modlistPath/$modlistName.$modlistEXT ]; then
			jq -r ".results[].$1" "$modlistPath/$modlistName.$modlistEXT"
		else
			echo "Modlist does not appear to exist, attempting to download..."
		fi
	else
		echo "Modlist configuration directory not found, $progName may not be installed"
	fi
	echo ""
}
function ModPortalCount {
	echo ""
	if [ -d $modlistPath ]; then
		if [ -e $modlistPath/$modlistName.$modlistEXT ]; then
			echo -n "Number of mods availble on remote server: "
			jq -r ".results | length" "$modlistPath/$modlistName.$modlistEXT"
		else
			echo "Modlist does not appear to exist, attempting to download..."
		fi
	else
		echo "Modlist configuration directory not found, $progName may not be installed"
	fi
	echo ""
}
function ListMods {
	echo ""
	if [ -d $modsDIR ]; then
		currentMods=$(ls $modsDIR)
		if [ "$currentMods" == "" ]; then
			echo "No mods are currently installed on the local system"
			echo "Use \"sudo $progName -m -g\" to download mods from the offical portal"
			echo "Or use \"sudo $progName -m -i\" to import mods on the local system into $progName"
		else
			echo "Mods currently available on local system:"
			for i in $(echo $(ls $modsDIR) | sed "s/,/ /g")
			do
			    echo " - $i"
			done
		fi
	else
		echo "Mods directory not found, $progName may not be installed"
	fi
	echo ""
}
function ImportMod {
	echo ""
	if [ "$1" == "" ]; then
		echo "Function not yet implemented, sorry :/"
	fi
	echo ""
}
function GetModInfo {
	echo ""
	if [ -d $modlistPath ]; then
		if [ -e $modlistPath/$modlistName.$modlistEXT ]; then
			i=0
			#sort by first letter to speed up search
			#use $query:0:1 to get first letter
			i_max=$(jq -r ".results | length" "$modlistPath/$modlistName.$modlistEXT")
			ModPortalCount
			while [ $i -lt $i_max ]
			do
				echo -n "Mods searched: "
				echo $i
				j=0
				while [ $j -lt ${#i} ]
				do
					shift="$shift\b"
				done
				echo -en "\b"

				result=$(jq -r ".results[$i].$1" "$modlistPath/$modlistName.$modlistEXT")
				if [ "$result" == "$2" ]; then
					#show only key info
					echo ""
					echo -n "Name: "
					jq -r ".results[$i].latest_release.info_json.name" "$modlistPath/$modlistName.$modlistEXT"
					echo -n "Author: "
					jq -r ".results[$i].latest_release.info_json.author" "$modlistPath/$modlistName.$modlistEXT"
					echo -n "Description: "
					jq -r ".results[$i].latest_release.info_json.description" "$modlistPath/$modlistName.$modlistEXT"

					echo ""
					echo -n "Target Factorio Version: "
					jq -r ".results[$i].latest_release.info_json.factorio_version" "$modlistPath/$modlistName.$modlistEXT"
					echo -n "Current Mod Version: "
					jq -r ".results[$i].latest_release.info_json.version" "$modlistPath/$modlistName.$modlistEXT"
					echo -n "Current Mod Version Downloads: "
					jq -r ".results[$i].latest_release.downloads_count" "$modlistPath/$modlistName.$modlistEXT"
					echo -n "Lifetime Mod Downloads: "
					jq -r ".results[$i].downloads_count" "$modlistPath/$modlistName.$modlistEXT"

					echo ""
					echo "Dependencies: "
					k=0
					k_max=$(jq -r ".results | length" "$modlistPath/$modlistName.$modlistEXT")
					while [ $k -lt $k_max ]
					do
						echo -n " - "
						jq -r ".results[$i].latest_release.info_json.dependencies[$k]" "$modlistPath/$modlistName.$modlistEXT"
					done

					#jq -r ".results[$i]" "$modlistPath/$modlistName.$modlistEXT"
					let i=$i_max
				else
					let i=i+1
				fi
			done
		else
			echo "Modlist does not appear to exist, attempting to download..."
		fi
	else
		echo "Modlist configuration directory not found, $progName may not be installed"
	fi
	echo ""
}

#Versions
function determineLatestVersion {
	VER_LATEST=0.14.22
}
function parseVersionsCMDS {
	case $1 in
		-u)
			getLatestVersion
			;;
		-d)
			getVersion $2
			;;
		*)
			ListVersions $2
			;;
	esac
}
function ListVersions {
	echo ""
	if [ -d $versionsDIR ]; then
		currentVerisons=$(ls $versionsDIR)
		if [ "$currentVerisons" == "" ]; then
			echo "No versions are currently installed on the local system"
			echo "Use \"sudo $progName -u\" to download the latest version"
		else
			echo "Versions currently available on local system:"
			for i in $(echo $(ls $versionsDIR) | sed "s/,/ /g")
			do
			    echo " - $i"
			done
		fi
	else
		echo "Versions directory not found, $progName may not be installed"
	fi
	echo ""
}
function getLatestVersion {
	echo ""
	echo "Checking for latest version..."
	echo ""
}
function logfileCheck {
	if [ -e $downloadLogFile ]; then
		echo ""
		echo "Do you want to read the log file? (y/n): "
		read select
		if [ "$select" == "y" ]; then
			$editor $downloadLogFile
		fi
		echo ""
	fi
}
function getVersion {
	VER="$1"

	if [ "$VER" == "" ]; then
		getLatestVersion
	else
		echo ""
		if [ -d "$versionsDIR/$VER" ]; then
			echo "Version $VER appears to already exist on the local system"
			echo -n "Do you want to re-download this version? (y/n)"
			read select
		else
			if [ -d $versionsDIR ]; then
				URL=$URL/$VER/$urlTail
				if [[ $(wget $URL -O-) ]] 2>/dev/null; then
					echo -n "Downloading factorio headless server version $VER to local system..."
					(echo "")>>$downloadLogFile
					(echo "")>>$downloadLogFile
					(date +%Y%m%d%H%M%S)>>$downloadLogFile
					(echo "")>>$downloadLogFile
					wget $URL --output-document "$baseDIR/$VER.tar.gz" -a $downloadLogFile
					if [ -e "$baseDIR/$VER.tar.gz" ]; then
						echo "SUCCESS"

						echo -n "Unpacking headless server..."
						(echo "")>>$downloadLogFile
						(tar -xzf "$baseDIR/$VER.tar.gz" -C $versionsDIR)>>$downloadLogFile
						if [ -d "$versionsDIR/$tarName" ]; then
							echo "SUCCESS"

							echo -n "Configuring headless server..."
							mv "$versionsDIR/$tarName" "$versionsDIR/$VER"
							if [ -d "$versionsDIR/$VER" ]; then
								echo "SUCCESS"

								echo -n "Cleaning up..."
								if [ -e "$versionsDIR/$VER.tar.gz" ]; then
									rm "$versionsDIR/$VER.tar.gz"
									if [ -e "$versionsDIR/$VER.tar.gz" ]; then
										echo "FAILED"
										logfileCheck
									else
										echo "SUCCESS"
									fi
								else
									echo "SUCCESS"
								fi
								echo ""
								echo "DONE"
							else
								echo "FAILED"
								logfileCheck
							fi
						else
							echo "FAILED"
							logfileCheck
						fi
					else
						echo "FAILED"
						logfileCheck
					fi
				else
					echo "Version $VER of the factorio headless server is not available on the remote system"
				fi
			else
					echo "Versions directory not found, $progName may not be installed"
			fi
		fi
		echo ""
	fi
}

#run
function Run {
	logPath="$baseDir/factMgr.log"
	if ! [ -z "$4" ]; then
		SAVEINT="$4"
		AUTO="$AutoSaveIntCMD $SAVEINT"
	else
		AUTO=""
	fi

	if [ -z $1 ] || [ -z $2 ]; then
		Syntax
	else
		mapName="$1.$saveExt"
		VER=$2
		if [ -e "$savesDIR/$mapName" ]; then
			SAVE="$savesDIR/$mapName"
		else
			ERRORMSG="Specified save file does not exist"
		fi
		if [ -z "$3" ]; then
			MOD=""
		else
			MODPATH="$modsDIR/$3"
			echo "$MODPATH"
			if [ -d "$MODPATH" ]; then
				if [ "$(ls -A /path/to/dir)" ]; then
				   MOD="$MODPATH"
				else
				   ERRORMSG="Specified Mod pack is empty"
				fi
			else
				ERRORMSG="Specified Mod pack does not exist"
			fi
		fi
		if [ -z "$ERRORMSG" ]; then
			($versionsDIR/$VER/$runFile $startCMD $SAVE $setModCMD $MOD $AUTO &)>"$logPath"
			echo "Factorio" $VER " started using map:" $SAVE
			if ! [ "$MOD" = "" ]; then
				echo "Using Mod pack: $MOD"
			fi
			if ! [ "$AUTO" = "" ]; then
				echo "Set auto save interval to $AUTO"
			fi
			echo "Connect using UDP on port 34197"
		else
			echo "ERROR: "$ERRORMSG
		fi
	fi
}

#Developer
function devCMDs {
	case $1 in
		-v)
			echo ""
			echo "$progName version: $ProgVer"
			echo ""
			;;
		-ms)
			ModPortalStats $2
			;;
		-mi)
			GetModInfo $2 $3
			;;
		-mc)
			ModPortalCount
			;;
		-1)
			updateModList
			;;
		*)
			secret
			;;
	esac
}
function secret {
	echo ""
	echo "This is a Bunny, and he is unimpressed that you found his secret command"
	echo ""
	echo "(\(\\"
	echo "(- -)"
	echo "((‘)((‘)"
	echo ""
}
#MAIN

init

if [[ $EUID -ne 0 ]]; then
	echo "ERROR: Either you do not have root privilages or you forgot to use Sudo (probably the latter :P)"
else
	case $1 in
		-s)
			parseSaveCMDS $2 $3 $4
			;;
		-install)
			Install
			;;
		-uninstall)
			Uninstall
			;;
		-config)
			Config
			;;
		-dev)
			devCMDs $2 $3 $4
			;;
		-m)
			parseModsCMDS $2 $3 $4
			;;
		-v)
			parseVersionsCMDS $2 $3 $4
			;;
		-r)
			Run $2 $3 $4 $5
			;;
		-secret)
			secret
			;;
		*)
			Syntax
			;;
	esac
fi
